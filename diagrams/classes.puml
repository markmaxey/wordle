@startuml
class wordle.Letter {
- {static} char NO_LETTER
- char value
- LetterState state
+ <<Create>> Letter()
+ <<Create>> Letter(char,LetterState)
+ char getValue()
+ LetterState getState()
+ boolean equals(Letter)
}
enum wordle.LetterState {
+  notYetChosen
+  notInWord
+  wrongPosition
+  right
}
class wordle.WordleUserInterface {
- WordleRulesController wordleRulesController
+ <<Create>> WordleUserInterface(WordleRulesController)
+ void run()
- char[] guessAWord()
- void renderCandidateSolutions(CandidateSolutions)
}
class wordle.Word {
- int totalPossibleLetters
- Letter[] letters
+ <<Create>> Word(int)
+ <<Create>> Word(Word,char[])
+ boolean equals(Word)
}
class wordle.Dictionary {
+ Word chooseSolution(int)
}
class wordle.WordleRulesController {
- Dictionary dictionary
- Word solution
- CandidateSolutions candidateSolutions
+ <<Create>> WordleRulesController(int,int)
+ boolean isGameOver()
- boolean hasGuessedTheCorrectWord()
+ CandidateSolutions getCandidateSolutions()
+ void guess(char[])
}
class wordle.Main {
+ {static} void main(String[])
}
class wordle.CandidateSolutions {
- int currentGuess
- int totalPossibleGuesses
- Word[] words
+ <<Create>> CandidateSolutions(int)
+ Word[] getWords()
+ void guess(Word,char[])
+ boolean hasAnotherTurn()
+ boolean has(Word)
}
@enduml